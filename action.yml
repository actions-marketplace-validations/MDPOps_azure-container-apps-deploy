name: Azure Container Apps Deploy by MDP
branding:
  icon: truck
  color: red
author: Clark159
description: GitHub Action for Deploying Azure Container Apps

inputs:
  resourceGroupName:
    description: Resource Group Name
    required: true
    
  registryServerName:
    description: Registry Server Name
    required: true

  dockerImageName:
    description: Docker Image Name
    required: true

  containerAppName:
    description: Container App Name
    required: true

  containerLogName:
    description: container Log Name
    required: true

  containerEnvName:
    description: Container Environment Name
    required: true
    
runs:
  using: composite
  steps:
         
  - name: Configure Azure CLI
    uses: azure/CLI@v1
    with:
      inlineScript: |
        az configure --defaults location=$(az group show --name ${{ inputs.resourceGroupName }} --query location -o tsv)

  - name: Configure Azure Container Registry
    uses: azure/CLI@v1
    with:
      inlineScript: |
        az acr update --name ${{ inputs.registryServerName }} --admin-enabled true

  - name: Configure Azure Log Analytics
    uses: azure/CLI@v1
    with:
      inlineScript: |
        az monitor log-analytics workspace create --resource-group ${{ inputs.resourceGroupName }} --workspace-name ${{ inputs.containerLogName }}
        echo 'LOG_ANALYTICS_ID=$(az monitor log-analytics workspace show --resource-group ${{ inputs.resourceGroupName }} --name ${{ inputs.containerLogName }} --query customerId -o tsv)' >> $GITHUB_ENV
        echo 'LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys --resource-group ${{ inputs.resourceGroupName }} --name ${{ inputs.containerLogName }} --query primarySharedKey -o tsv)' >> $GITHUB_ENV
 
  - name: Deploy Azure Container Apps
    uses: azure/CLI@v1
    with:
      inlineScript: |
        az containerapp up \
          --name ${{ inputs.containerAppName }} \
          --resource-group ${{ inputs.resourceGroupName }} \
          --environment ${{ inputs.containerEnvName }} \
          --logs-workspace-id ${{ env.LOG_ANALYTICS_ID }} \
          --logs-workspace-key ${{ env.LOG_ANALYTICS_KEY }} \
          --image ${{ inputs.registryServerName }}/${{ inputs.dockerImageName }}:${{ github.sha }} \
          --ingress external \
          --target-port 80